param numQcs integer, >=0;
param numQueries integer, >= 0;
set Queries := {1..numQueries};
set Qcs := {1..numQcs}; 
param sparsityDelta{q in Queries} >=0;
param probQ{q in Queries} >=0, <=1;
param storageCapacity >=0;
param stratifiedSampleSize{i in Qcs} >=0;
param DqcsI{i in Qcs} >= 0;
param DqcsJ{j in Queries} >=0;
param domainQueries{j in Queries, i in Qcs}, binary,  >=0;
param fraction{j in Queries,i in Qcs} := min(1,(DqcsI[i] / DqcsJ[j])) * domainQueries[j,i];
var z{i in Qcs}, binary;
var y{j in Queries} >=0, <=1;
maximize obj: sum{q in Queries} probQ[q]*y[q]*sparsityDelta[q];
subject to storage: 0 <= sum{i in Qcs} stratifiedSampleSize[i]*z[i] <= storageCapacity;
subject to coverage1: y[1] <= sum{i in Qcs}fraction[1,i]*z[i];
subject to coverage2: y[2] <= sum{i in Qcs}fraction[2,i]*z[i];
subject to coverage3: y[3] <= sum{i in Qcs}fraction[3,i]*z[i];
subject to coverage4: y[4] <= sum{i in Qcs}fraction[4,i]*z[i];
subject to coverage5: y[5] <= sum{i in Qcs}fraction[5,i]*z[i];
solve;
display z;
end;
